{"version":3,"file":"create_template.min.js","sources":["../src/create_template.js"],"sourcesContent":["define(['jquery', \"core/ajax\"], function($) {\n    return {\n        init: function() {\n            const formElements = $('#create_template_form input, #create_template_form select, #create_template_form textarea');\n            const form = $('#create_template_form');\n            const saveButton = form.find('#id_save_template_button'); // Update this to the correct ID\n            const cancelButton = form.find('#id_cancel_template_button'); // Cancel button\n\n            // Get the current URL, including query parameters\n            // const currentUrlWithParams = window.location.href;\n\n            // Iterate over each form element to add an event listener for changes.\n            formElements.each(function() {\n                const element = $(this);\n                element.on('change', function() {\n                    markTouched(element);\n                });\n\n                if (element.is(':checkbox') || element.is(':radio')) {\n                    element.on('click', function() {\n                        markTouched(element);\n                    });\n                }\n            });\n\n            /**\n             * Get query parameters from the current URL.\n             * @returns {Object} An object containing the query parameters.\n             * @example\n             * getQueryParams(); // returns {categoryid: 1, courseid: 2}\n             */\n            function getQueryParams() {\n                const params = {};\n                const urlSearchParams = new URLSearchParams(window.location.search);\n                urlSearchParams.forEach((value, key) => {\n                    params[key] = value;\n                });\n                return params;\n            }\n\n            saveButton.on('click', function() {\n                let formData = {};\n\n                // Gather only touched elements\n                formElements.each(function() {\n                    const element = $(this);\n                    if (element.attr('data-touched') === 'true') {\n                        const htmlId = element.attr('id');\n                        const settingName = htmlId.replace('id_', ''); // Derive the setting name by removing 'id_'\n                        formData[settingName] = element.val();\n                    }\n                });\n\n                // Add template_name and any other essential values\n                formData['template_name'] = form.find('input[name=\"template_name\"]').val();\n\n                // Append query parameters (like categoryid, courseid, etc.)\n                const queryParams = getQueryParams();\n                formData = {...formData, ...queryParams};\n\n                const baseUrl = M.cfg.wwwroot;\n                const url = baseUrl + '/local/setcheck/pages/create_template.php?';\n\n                // Submit the form data using AJAX\n                $.ajax({\n                    url: url,\n                    method: 'POST',\n                    data: formData,\n                    success: function(response) {\n                        // Handle success response\n                        const responseData = JSON.parse(response);\n                        if (responseData.redirect) {\n                            window.location.href = responseData.redirect;\n                        } else if (responseData.error) {\n                            console.error(responseData.error);\n                        }\n                    },\n                    error: function(xhr, status, error) {\n                        console.error('An error occurred:', error);\n                    }\n                });\n            });\n\n            // Handle cancel button click.\n            cancelButton.on('click', function(event) {\n                event.preventDefault(); // Prevent the default action\n                window.location.href = M.cfg.wwwroot + '/local/setcheck/pages/manage_templates.php';\n            });\n\n            /**\n             * @param {jQuery} element The element to mark as touched.\n             */\n            function markTouched(element) {\n                element.attr('data-touched', 'true');\n            }\n        }\n    };\n});"],"names":["define","$","init","formElements","form","saveButton","find","cancelButton","markTouched","element","attr","each","this","on","is","formData","settingName","replace","val","queryParams","params","URLSearchParams","window","location","search","forEach","value","key","getQueryParams","url","M","cfg","wwwroot","ajax","method","data","success","response","responseData","JSON","parse","redirect","href","error","console","xhr","status","event","preventDefault"],"mappings":"AAAAA,wCAAO,CAAC,SAAU,cAAc,SAASC,SAC9B,CACHC,KAAM,iBACIC,aAAeF,EAAE,6FACjBG,KAAOH,EAAE,yBACTI,WAAaD,KAAKE,KAAK,4BACvBC,aAAeH,KAAKE,KAAK,uCAsFtBE,YAAYC,SACjBA,QAAQC,KAAK,eAAgB,QAjFjCP,aAAaQ,MAAK,iBACRF,QAAUR,EAAEW,MAClBH,QAAQI,GAAG,UAAU,WACjBL,YAAYC,aAGZA,QAAQK,GAAG,cAAgBL,QAAQK,GAAG,YACtCL,QAAQI,GAAG,SAAS,WAChBL,YAAYC,eAoBxBJ,WAAWQ,GAAG,SAAS,eACfE,SAAW,GAGfZ,aAAaQ,MAAK,iBACRF,QAAUR,EAAEW,SACmB,SAAjCH,QAAQC,KAAK,gBAA4B,OAEnCM,YADSP,QAAQC,KAAK,MACDO,QAAQ,MAAO,IAC1CF,SAASC,aAAeP,QAAQS,UAKxCH,SAAQ,cAAoBX,KAAKE,KAAK,+BAA+BY,YAG/DC,6BAzBAC,OAAS,UACS,IAAIC,gBAAgBC,OAAOC,SAASC,QAC5CC,SAAQ,CAACC,MAAOC,OAC5BP,OAAOO,KAAOD,SAEXN,OAoBaQ,GACpBb,SAAW,IAAIA,YAAaI,mBAGtBU,IADUC,EAAEC,IAAIC,QACA,6CAGtB/B,EAAEgC,KAAK,CACHJ,IAAKA,IACLK,OAAQ,OACRC,KAAMpB,SACNqB,QAAS,SAASC,gBAERC,aAAeC,KAAKC,MAAMH,UAC5BC,aAAaG,SACbnB,OAAOC,SAASmB,KAAOJ,aAAaG,SAC7BH,aAAaK,OACpBC,QAAQD,MAAML,aAAaK,QAGnCA,MAAO,SAASE,IAAKC,OAAQH,OACzBC,QAAQD,MAAM,qBAAsBA,aAMhDpC,aAAaM,GAAG,SAAS,SAASkC,OAC9BA,MAAMC,iBACN1B,OAAOC,SAASmB,KAAOZ,EAAEC,IAAIC,QAAU"}