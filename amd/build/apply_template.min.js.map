{"version":3,"file":"apply_template.min.js","sources":["../src/apply_template.js"],"sourcesContent":["define([\"jquery\", \"core/str\", \"core/ajax\"], function($, Str, Ajax) {\n    return {\n        init: function() {\n            // Click handler for the \"Apply Template\" button.\n            $(\"#id_apply_setcheck_template\").click(function(e) {\n                e.preventDefault(); // Prevent the form submission.\n\n                var templateId = $(\"#id_setcheck_template option:selected\").val();\n                if (templateId == 0) {\n                    return; // No template selected.\n                }\n\n                // Make AJAX call to fetch template data.\n                Ajax.call([\n                    {\n                        methodname: \"local_setcheck_get_template\",\n                        args: {templateid: templateId},\n                        done: function(data) {\n                            console.log(\"Template data:\", data[0].settings);\n                            const settings = data[0].settings; // Assign settings to a variable\n                            applyTemplateSettings(settings); // Call to apply settings\n\n                            // Show success message to indicate the template has been applied.\n                            Str.get_string(\"template_applied_success\", \"local_setcheck\").done(\n                                function(s) {\n                                    $(\"#id_setcheck_header\").after(\n                                        '<div class=\"alert alert-success\">' + s + \"</div>\"\n                                    );\n                                }\n                            );\n                        },\n                        fail: function(error) {\n                            console.log(\"Error:\", error);\n                            Str.get_string(\"template_applied_error\", \"local_setcheck\").done(\n                                function(s) {\n                                    $(\"#id_setcheck_header\").after(\n                                        '<div class=\"alert alert-danger\">' + s + \"</div>\"\n                                    );\n                                }\n                            );\n                        },\n                    },\n                ]);\n            });\n\n            /**\n             * Apply template settings to form fields.\n             * @param {Object} settings - Template settings object with field values and attributes.\n             */\n            function applyTemplateSettings(settings) {\n                expandSections(); // Ensure all form sections are open\n\n                settings.forEach(function(setting) {\n                    var fieldId = setting.html_id;\n                    var fieldValue = setting.value;\n                    var element = $('#' + fieldId);\n\n                    if (element.length > 0) {\n                        // Determine the field type and apply the setting.\n                        var fieldType = element.prop(\"type\");\n\n                        if (fieldType === \"checkbox\") {\n                            $('#' + fieldId).prop(\"checked\", fieldValue === \"1\" || fieldValue === true);\n                        } else if (fieldType === \"text\" || fieldType === \"textarea\" || fieldType === \"select-one\") {\n                            element.val(fieldValue);\n                        } else if (fieldType === \"radio\") {\n                            $('input[name=\"' + element.attr(\"name\") + '\"][value=\"' + fieldValue + '\"]').prop(\"checked\", true);\n                        }\n                    }\n                });\n            }\n\n            /**\n             * Expand all collapsible sections in the form to ensure fields are accessible.\n             */\n            function expandSections() {\n                $(\".collapsemenu\").attr(\"aria-expanded\", \"true\").removeClass(\"collapsed\");\n                $(\"fieldset.collapsible\").removeClass(\"collapsed\").addClass(\"show\");\n            }\n        },\n    };\n});\n"],"names":["define","$","Str","Ajax","init","click","e","preventDefault","templateId","val","call","methodname","args","templateid","done","data","console","log","settings","attr","removeClass","addClass","forEach","setting","fieldId","html_id","fieldValue","value","element","length","fieldType","prop","applyTemplateSettings","get_string","s","after","fail","error"],"mappings":"AAAAA,uCAAO,CAAC,SAAU,WAAY,cAAc,SAASC,EAAGC,IAAKC,YAClD,CACHC,KAAM,WAEFH,EAAE,+BAA+BI,OAAM,SAASC,GAC5CA,EAAEC,qBAEEC,WAAaP,EAAE,yCAAyCQ,MAC1C,GAAdD,YAKJL,KAAKO,KAAK,CACN,CACIC,WAAY,8BACZC,KAAM,CAACC,WAAYL,YACnBM,KAAM,SAASC,MACXC,QAAQC,IAAI,iBAAkBF,KAAK,GAAGG,oBA+BvBA,UA2B3BjB,EAAE,iBAAiBkB,KAAK,gBAAiB,QAAQC,YAAY,aAC7DnB,EAAE,wBAAwBmB,YAAY,aAAaC,SAAS,QAzB5DH,SAASI,SAAQ,SAASC,aAClBC,QAAUD,QAAQE,QAClBC,WAAaH,QAAQI,MACrBC,QAAU3B,EAAE,IAAMuB,YAElBI,QAAQC,OAAS,EAAG,KAEhBC,UAAYF,QAAQG,KAAK,QAEX,aAAdD,UACA7B,EAAE,IAAMuB,SAASO,KAAK,UAA0B,MAAfL,aAAqC,IAAfA,YAClC,SAAdI,WAAsC,aAAdA,WAA0C,eAAdA,UAC3DF,QAAQnB,IAAIiB,YACS,UAAdI,WACP7B,EAAE,eAAiB2B,QAAQT,KAAK,QAAU,aAAeO,WAAa,MAAMK,KAAK,WAAW,OA9C5FC,CADiBjB,KAAK,GAAGG,UAIzBhB,IAAI+B,WAAW,2BAA4B,kBAAkBnB,MACzD,SAASoB,GACLjC,EAAE,uBAAuBkC,MACrB,oCAAsCD,EAAI,cAK1DE,KAAM,SAASC,OACXrB,QAAQC,IAAI,SAAUoB,OACtBnC,IAAI+B,WAAW,yBAA0B,kBAAkBnB,MACvD,SAASoB,GACLjC,EAAE,uBAAuBkC,MACrB,mCAAqCD,EAAI"}